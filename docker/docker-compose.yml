version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: customer_analytics_db
    environment:
      POSTGRES_DB: customer_analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ../database/sample_data.sql:/docker-entrypoint-initdb.d/02-sample_data.sql
    networks:
      - analytics_network

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: customer_analytics_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - analytics_network

  # 백엔드 API 서버
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: customer_analytics_backend
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: customer_analytics
      DB_USER: postgres
      DB_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - analytics_network
    restart: unless-stopped

  # 프론트엔드 React 앱
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: customer_analytics_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
    ports:
      - "8100:80"
    depends_on:
      - backend
    networks:
      - analytics_network
    restart: unless-stopped

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: customer_analytics_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - analytics_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  analytics_network:
    driver: bridge 